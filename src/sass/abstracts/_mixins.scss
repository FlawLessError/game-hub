@use "sass:map";
@use "sass:meta";
@use "sass:math";

@use "sizes" as *;
@use "colors" as *;
@use "typography" as *;
@use "breakpoints" as *;

// Media Query
@mixin mq($size) {
  @if (map.has-key($breakpoints, $size)) {
    @media screen and (min-width: map.get($breakpoints, $size)) {
      @content;
    }
  } @else if(meta.type-of($size) == number) {
    @if (math.is-unitless($size) == false) {
      @media screen and (min-width: $size) {
        @content;
      }
    } @else {
      @error "The size argument is unitless!";
    }
  } @else {
    @error "The size argument is incorrect!";
  }
}

// a11y outline
@mixin focus-visible() {
  outline: 4px double black;
  outline-offset: 2px;
  box-shadow: 0 0 0 5px white;
}

// Flex-group
@mixin flex-group($flex-column-gap: $flex-gap, $flex-row-gap: $flex-gap * 0.5) {
  display: flex;
  flex-wrap: wrap;
  column-gap: $flex-column-gap;
  row-gap: $flex-row-gap;
  @content;
}

@mixin heading($font-size, $color: $color-neutral-800) {
  color: $color;
  font-size: $font-size;
  font-family: $ff-base;
  font-weight: $fw-700;
  letter-spacing: $letter-spacing;
  line-height: 1;
  text-decoration: none;
}

// Visually hidden
@mixin visually-hidden() {
  position: absolute;
  overflow: hidden;
  white-space: nowrap;
  width: 1px;
  height: 1px;
  clip: rect(0, 0, 0, 0);
  clip-path: inset(50%);
}

// Fast Box Shadow
@mixin box-shadow($type: after) {
  &::#{$type} {
    content: "";
    position: absolute;
    inset: 0;
    background: black;
    filter: blur(0.2rem) opacity(0.2);
    transform: translate(0.2rem, 0.2rem);
    z-index: -1;
  }
}

// Skeleton Animation
@mixin setBg {
  background: linear-gradient(
    130deg,
    $color-neutral-300 45%,
    $color-neutral-600,
    $color-neutral-300 55%
  );
  background-size: 500%;
}

@mixin flashAnimation {
  @keyframes flash {
    0% {
      @include setBg();
      background-position-x: -50%;
    }
    100% {
      @include setBg();
      background-position-x: -250%;
    }
  }
}
